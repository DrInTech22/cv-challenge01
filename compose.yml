services:
  frontend:
    build:
      context: ./frontend
    env_file:
      - frontend/.env
    depends_on:
      - backend
    ports:
      - "5173:5173"
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=(Host(`cv01.drintech.online`) || Host(`www.cv01.drintech.online`)"
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=letsencryptresolver
    networks:
      - frontend-network
  
  backend:
    build:
      context: ./backend
    env_file:
      - backend/.env
    ports:
      - "8000:8000"
    networks:
      - frontend-network
      - backend-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=(Host(`cv01.drintech.online`) && (PathPrefix(`/api`) || PathPrefix(`/redoc`) || PathPrefix(`/docs`)))
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=letsencryptresolver
    depends_on:
      - db

  db:
    image: postgres:13
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: changethis123
    networks:
      - backend-network

  adminer:
    image: adminer
    restart: always
    ports:
      - "8090:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`cv01.drintech.online`) && PathPrefix(`/db`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=letsencryptresolver
    networks:
      - backend-network

  traefik:
    image: traefik:v2.10.1
    restart: unless-stopped
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false # require containers to define `traefik.enable=true` to be exposed
      - --api
      - --certificatesresolvers.letsencryptresolver.acme.email=drintech222@gmail.com
      - --certificatesresolvers.letsencryptresolver.acme.storage=/acme.json
      - --certificatesresolvers.letsencryptresolver.acme.tlschallenge=true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # allow Traefik to listen to Docker events
      - /mnt/media/traefik/acme.json:/acme.json # stores ACME (HTTPS) certificates
    labels:
      - traefik.enable=true

      # "admin" middleware definition
      # to be used by services that do not have their own security
      #- traefik.http.middlewares.admin.basicauth.users=your_username:your_password

      # expose the traefik dashboard
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`proxy.cv01.drintech.online`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=admin
      - traefik.http.routers.traefik.tls.certresolver=letsencryptresolver
    env_file:
      - traefik/.env
    networks:
      - backend-network
      - frontend-network

networks:
  frontend-network:
  backend-network:
# volumes:
#   postgres_data: